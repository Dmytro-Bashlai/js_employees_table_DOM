{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SACjC,EAAkB,GAEtB,EAAM,kBAAkB,CACtB,WACC,8hCAyDH,IAAM,EAAO,SAAS,aAAa,CAAC,sBAiHpC,SAAS,EAAe,CAAa,CAAE,CAAS,EAC9C,IAAQ,EAA2B,EAA3B,SAAA,CAAW,EAAgB,EAAhB,WAAnB,CACM,EAAa,EAAG,EAAM,aAAa,CAAC,SAAS,IAAI,EAEvD,EAAU,IAAI,CAAC,SAAC,CAAA,CAAM,CAAtB,EACE,IAAM,EAAQ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CACzC,EAAQ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CACzC,EAAS,gBAEf,AAAI,CAAC,OAAQ,WAAY,SAAS,CAAC,QAAQ,CAAC,GACnC,AAAc,iBAAd,EACH,EAAM,aAAa,CAAC,GACpB,EAAM,aAAa,CAAC,GAGtB,CAAC,SAAU,MAAM,CAAC,QAAQ,CAAC,GACtB,AAAc,iBAAd,EACH,CAAC,EAAM,OAAO,CAAC,EAAQ,IAAM,CAAC,EAAM,OAAO,CAAC,EAAQ,IACpD,CAAC,EAAM,OAAO,CAAC,EAAQ,IAAM,CAAC,EAAM,OAAO,CAAC,EAAQ,UAE5D,GAEA,IAAM,EAAY,EAAM,aAAa,CAAC,QAEtC,CAAA,EAAU,SAAS,CAAG,GACtB,EAAU,OAAO,CAAC,SAAC,CAAnB,EAA2B,OAAA,EAAU,WAAW,CAAC,E,EACnD,CAEA,SAAS,EAAY,CAAI,CAAE,CAAW,EACpC,IAAM,EAAQ,EAAK,aAAa,CAAC,eAEjC,GAAI,EAAO,CACT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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar titleHeaderText = \"\";\ntable.insertAdjacentHTML(\"afterend\", '\\n  <form\\n    class=\"new-employee-form\"\\n    novalidate\\n  >\\n    <label>\\n      Name:\\n      <input\\n        data-qa=\"name\"\\n        name=\"name\"\\n        type=\"text\"\\n        required\\n      />\\n    </label>\\n    <label>\\n      Position:\\n      <input\\n        data-qa=\"position\"\\n        name=\"position\"\\n        type=\"text\"\\n        required\\n      />\\n    </label>\\n    <label>\\n      Office:\\n      <select data-qa=\"office\">\\n        <option selected>Tokyo</option>\\n        <option>Singapore</option>\\n        <option>London</option>\\n        <option>New York</option>\\n        <option>Edinburgh</option>\\n        <option>San Francisco</option>\\n      </select>\\n    </label>\\n    <label>\\n      Age:\\n      <input\\n        data-qa=\"age\"\\n        name=\"age\"\\n        type=\"number\"\\n        required\\n      />\\n    </label>\\n    <label>\\n      Salary:\\n      <input\\n        data-qa=\"salary\"\\n        name=\"salary\"\\n        type=\"number\"\\n        required\\n      />\\n    </label>\\n    <button type=\"submit\">Save to table</button>\\n  </form>\\n  ');\nvar form = document.querySelector(\".new-employee-form\");\ntable.addEventListener(\"click\", function(e) {\n    var headerCell = e.target.closest(\"thead th\");\n    if (!headerCell) return;\n    if (headerCell.textContent !== titleHeaderText) {\n        getSortedTable(headerCell, \"ascDirection\");\n        titleHeaderText = headerCell.textContent;\n    } else {\n        getSortedTable(headerCell, \"descDirection\");\n        titleHeaderText = \"\";\n    }\n});\ntable.addEventListener(\"click\", function(e) {\n    var chosenRow = e.target.closest(\"tbody tr\");\n    var tbodyRows = _to_consumable_array(table.querySelector(\"tbody\").rows);\n    if (chosenRow && !chosenRow.classList.contains(\"active\")) {\n        tbodyRows.forEach(function(row) {\n            return row.removeAttribute(\"class\");\n        });\n        chosenRow.setAttribute(\"class\", \"active\");\n    }\n});\ntable.addEventListener(\"dblclick\", function(e) {\n    var chosenCell = e.target.closest(\"tbody td\");\n    if (chosenCell) {\n        var editInput = document.createElement(\"input\");\n        var cellTextDefault = chosenCell.textContent;\n        chosenCell.innerHTML = \"\";\n        editInput.classList.add(\"cell-input\");\n        chosenCell.append(editInput);\n        editInput.value = cellTextDefault;\n        editInput.focus();\n        var handleBlur = function handleBlur() {\n            saveChanges(chosenCell, cellTextDefault);\n        };\n        editInput.addEventListener(\"keydown\", function(ev) {\n            if (ev.key === \"Enter\") {\n                editInput.removeEventListener(\"blur\", handleBlur);\n                saveChanges(chosenCell, cellTextDefault);\n            }\n        });\n        editInput.addEventListener(\"blur\", handleBlur);\n    }\n});\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var newRow = document.createElement(\"tr\");\n    var inputName = form.querySelector('input[name=\"name\"]').value.trim();\n    var inputAge = form.querySelector('input[name=\"age\"]').value.trim();\n    var inputSalary = form.querySelector('input[name=\"salary\"]').value.trim();\n    var inputPosition = form.querySelector('input[name=\"position\"]').value.trim();\n    if (!inputPosition || !inputName || !inputAge || !inputSalary) return pushNotification(\"All fields must be filled\", \"Please fill in all fields\", \"error\");\n    if (inputName.length < 4) return pushNotification(\"The name is to short\", \"The name must contain at least 4 characters\", \"error\");\n    if (+inputAge < 18 || +inputAge > 90) return pushNotification(\"Incorrect age entry\", \"The age must be between 18 and 90\", \"error\");\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = form.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var field = _step.value;\n            if (field.matches(\"label\")) {\n                var normalizedfieldName = field.firstChild.data.toLowerCase().replace(/[^a-z]/g, \"\");\n                var fieldValue = field.lastElementChild.value;\n                addEmployee(normalizedfieldName, fieldValue, newRow);\n            }\n            if (field.lastElementChild && field.lastElementChild.matches(\"input\")) field.lastElementChild.value = \"\";\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return pushNotification(\"Emploee added successfully\", \"The Emploee has been added to the table.\", \"success\");\n});\nfunction getSortedTable(pressedButton, direction) {\n    var cellIndex = pressedButton.cellIndex, textContent = pressedButton.textContent;\n    var tbodyRows = _to_consumable_array(table.querySelector(\"tbody\").rows);\n    tbodyRows.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[cellIndex].textContent;\n        var cellB = rowB.cells[cellIndex].textContent;\n        var regExp = /[^0-9]/g;\n        if ([\n            \"Name\",\n            \"Position\",\n            \"Office\"\n        ].includes(textContent)) return direction === \"ascDirection\" ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);\n        if ([\n            \"Salary\",\n            \"Age\"\n        ].includes(textContent)) return direction === \"ascDirection\" ? +cellA.replace(regExp, \"\") - +cellB.replace(regExp, \"\") : +cellB.replace(regExp, \"\") - +cellA.replace(regExp, \"\");\n    });\n    var tableBody = table.querySelector(\"tbody\");\n    tableBody.innerHTML = \"\";\n    tbodyRows.forEach(function(row) {\n        return tableBody.appendChild(row);\n    });\n}\nfunction saveChanges(cell, textDefault) {\n    var input = cell.querySelector(\".cell-input\");\n    if (input) {\n        var newText = input.value.trim();\n        cell.textContent = newText !== \"\" ? newText : textDefault;\n        input.remove();\n    }\n}\nfunction addEmployee(inputName, inputValue, row) {\n    var tableBody = table.querySelector(\"tbody\");\n    var headCells = table.querySelectorAll(\"thead th\");\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = headCells[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var headCell = _step.value;\n            var normalizedHeadCell = headCell.textContent.toLowerCase();\n            if (normalizedHeadCell === inputName) {\n                var checkedInputValue = inputName === \"salary\" ? formatSalary(inputValue) : inputValue;\n                row.insertAdjacentHTML(\"beforeend\", \"<td>\".concat(checkedInputValue, \"</td>\"));\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    tableBody.insertAdjacentElement(\"afterbegin\", row);\n}\nfunction formatSalary(salary) {\n    var sanitizedInput = salary.replace(/\\D/g, \"\");\n    var formattedInput = sanitizedInput.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return \"$\".concat(formattedInput);\n}\nfunction pushNotification(title, description, type) {\n    var message = document.createElement(\"div\");\n    message.classList.add(\"notification\", type);\n    message.setAttribute(\"data-qa\", \"notification\");\n    message.insertAdjacentHTML(\"beforeend\", '\\n    <h2 class=\"title\" style=\"font-size: inherit;\">'.concat(title, \"</h2>\\n    <p>\").concat(description, \"</p>\\n    \"));\n    document.body.insertAdjacentElement(\"beforeend\", message);\n    setTimeout(function() {\n        message.remove();\n    }, 5000);\n}\n\n//# sourceMappingURL=index.4817d284.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nlet titleHeaderText = '';\n\ntable.insertAdjacentHTML(\n  'afterend',\n  `\n  <form\n    class=\"new-employee-form\"\n    novalidate\n  >\n    <label>\n      Name:\n      <input\n        data-qa=\"name\"\n        name=\"name\"\n        type=\"text\"\n        required\n      />\n    </label>\n    <label>\n      Position:\n      <input\n        data-qa=\"position\"\n        name=\"position\"\n        type=\"text\"\n        required\n      />\n    </label>\n    <label>\n      Office:\n      <select data-qa=\"office\">\n        <option selected>Tokyo</option>\n        <option>Singapore</option>\n        <option>London</option>\n        <option>New York</option>\n        <option>Edinburgh</option>\n        <option>San Francisco</option>\n      </select>\n    </label>\n    <label>\n      Age:\n      <input\n        data-qa=\"age\"\n        name=\"age\"\n        type=\"number\"\n        required\n      />\n    </label>\n    <label>\n      Salary:\n      <input\n        data-qa=\"salary\"\n        name=\"salary\"\n        type=\"number\"\n        required\n      />\n    </label>\n    <button type=\"submit\">Save to table</button>\n  </form>\n  `,\n);\n\nconst form = document.querySelector('.new-employee-form');\n\ntable.addEventListener('click', function (e) {\n  const headerCell = e.target.closest('thead th');\n\n  if (!headerCell) {\n    return;\n  }\n\n  if (headerCell.textContent !== titleHeaderText) {\n    getSortedTable(headerCell, 'ascDirection');\n    titleHeaderText = headerCell.textContent;\n  } else {\n    getSortedTable(headerCell, 'descDirection');\n    titleHeaderText = '';\n  }\n});\n\ntable.addEventListener('click', function (e) {\n  const chosenRow = e.target.closest('tbody tr');\n  const tbodyRows = [...table.querySelector('tbody').rows];\n\n  if (chosenRow && !chosenRow.classList.contains('active')) {\n    tbodyRows.forEach((row) => row.removeAttribute('class'));\n    chosenRow.setAttribute('class', 'active');\n  }\n});\n\ntable.addEventListener('dblclick', function (e) {\n  const chosenCell = e.target.closest('tbody td');\n\n  if (chosenCell) {\n    const editInput = document.createElement('input');\n    const cellTextDefault = chosenCell.textContent;\n\n    chosenCell.innerHTML = '';\n    editInput.classList.add('cell-input');\n    chosenCell.append(editInput);\n    editInput.value = cellTextDefault;\n    editInput.focus();\n\n    const handleBlur = function () {\n      saveChanges(chosenCell, cellTextDefault);\n    };\n\n    editInput.addEventListener('keydown', (ev) => {\n      if (ev.key === 'Enter') {\n        editInput.removeEventListener('blur', handleBlur);\n        saveChanges(chosenCell, cellTextDefault);\n      }\n    });\n\n    editInput.addEventListener('blur', handleBlur);\n  }\n});\n\nform.addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const newRow = document.createElement('tr');\n  const inputName = form.querySelector('input[name=\"name\"]').value.trim();\n  const inputAge = form.querySelector('input[name=\"age\"]').value.trim();\n  const inputSalary = form.querySelector('input[name=\"salary\"]').value.trim();\n  const inputPosition = form\n    .querySelector('input[name=\"position\"]')\n    .value.trim();\n\n  if (!inputPosition || !inputName || !inputAge || !inputSalary) {\n    return pushNotification(\n      'All fields must be filled',\n      'Please fill in all fields',\n      'error',\n    );\n  }\n\n  if (inputName.length < 4) {\n    return pushNotification(\n      'The name is to short',\n      'The name must contain at least 4 characters',\n      'error',\n    );\n  }\n\n  if (+inputAge < 18 || +inputAge > 90) {\n    return pushNotification(\n      'Incorrect age entry',\n      'The age must be between 18 and 90',\n      'error',\n    );\n  }\n\n  for (const field of form.children) {\n    if (field.matches('label')) {\n      const normalizedfieldName = field.firstChild.data\n        .toLowerCase()\n        .replace(/[^a-z]/g, '');\n      const fieldValue = field.lastElementChild.value;\n\n      addEmployee(normalizedfieldName, fieldValue, newRow);\n    }\n\n    if (field.lastElementChild && field.lastElementChild.matches('input')) {\n      field.lastElementChild.value = '';\n    }\n  }\n\n  return pushNotification(\n    'Emploee added successfully',\n    'The Emploee has been added to the table.',\n    'success',\n  );\n});\n\nfunction getSortedTable(pressedButton, direction) {\n  const { cellIndex, textContent } = pressedButton;\n  const tbodyRows = [...table.querySelector('tbody').rows];\n\n  tbodyRows.sort((rowA, rowB) => {\n    const cellA = rowA.cells[cellIndex].textContent;\n    const cellB = rowB.cells[cellIndex].textContent;\n    const regExp = /[^0-9]/g;\n\n    if (['Name', 'Position', 'Office'].includes(textContent)) {\n      return direction === 'ascDirection'\n        ? cellA.localeCompare(cellB)\n        : cellB.localeCompare(cellA);\n    }\n\n    if (['Salary', 'Age'].includes(textContent)) {\n      return direction === 'ascDirection'\n        ? +cellA.replace(regExp, '') - +cellB.replace(regExp, '')\n        : +cellB.replace(regExp, '') - +cellA.replace(regExp, '');\n    }\n  });\n\n  const tableBody = table.querySelector('tbody');\n\n  tableBody.innerHTML = '';\n  tbodyRows.forEach((row) => tableBody.appendChild(row));\n}\n\nfunction saveChanges(cell, textDefault) {\n  const input = cell.querySelector('.cell-input');\n\n  if (input) {\n    const newText = input.value.trim();\n\n    cell.textContent = newText !== '' ? newText : textDefault;\n    input.remove();\n  }\n}\n\nfunction addEmployee(inputName, inputValue, row) {\n  const tableBody = table.querySelector('tbody');\n  const headCells = table.querySelectorAll('thead th');\n\n  for (const headCell of headCells) {\n    const normalizedHeadCell = headCell.textContent.toLowerCase();\n\n    if (normalizedHeadCell === inputName) {\n      const checkedInputValue =\n        inputName === 'salary' ? formatSalary(inputValue) : inputValue;\n\n      row.insertAdjacentHTML('beforeend', `<td>${checkedInputValue}</td>`);\n    }\n  }\n\n  tableBody.insertAdjacentElement('afterbegin', row);\n}\n\nfunction formatSalary(salary) {\n  const sanitizedInput = salary.replace(/\\D/g, '');\n  const formattedInput = sanitizedInput.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  return `$${formattedInput}`;\n}\n\nfunction pushNotification(title, description, type) {\n  const message = document.createElement('div');\n\n  message.classList.add('notification', type);\n  message.setAttribute('data-qa', 'notification');\n\n  message.insertAdjacentHTML(\n    'beforeend',\n    `\n    <h2 class=\"title\" style=\"font-size: inherit;\">${title}</h2>\n    <p>${description}</p>\n    `,\n  );\n\n  document.body.insertAdjacentElement('beforeend', message);\n\n  setTimeout(() => {\n    message.remove();\n  }, 5000);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","titleHeaderText","insertAdjacentHTML","form","getSortedTable","pressedButton","direction","cellIndex","textContent","tbodyRows","rows","sort","rowA","rowB","cellA","cells","cellB","regExp","includes","localeCompare","replace","tableBody","innerHTML","forEach","row","appendChild","saveChanges","cell","textDefault","input","newText","value","trim","remove","pushNotification","title","description","type","message","createElement","classList","add","setAttribute","concat","body","insertAdjacentElement","setTimeout","addEventListener","e","headerCell","target","closest","chosenRow","contains","removeAttribute","chosenCell","editInput","cellTextDefault","append","focus","handleBlur","ev","key","removeEventListener","preventDefault","newRow","inputName","inputAge","inputSalary","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","children","next","done","field","matches","normalizedfieldName","firstChild","data","toLowerCase","fieldValue","lastElementChild","addEmployee","inputValue","headCells","querySelectorAll","normalizedHeadCell","headCell","checkedInputValue","formatSalary","salary","formattedInput","sanitizedInput","err","return"],"version":3,"file":"index.4817d284.js.map"}